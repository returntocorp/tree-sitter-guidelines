#! /usr/bin/env bash
#
# Build all the grammars. Some are expected to fail.
#
set -eu

clear_status() {
  rm -f BUILD-OK BUILD-FAIL CI-FAIL
}

# This is super ugly but should be ok, right?
#
# The EXPECT-BUILD-OK and EXPECT-BUILD-FAIL are persistent and set the
# expectations. EXPECT-BUILD-OK is optional. They are consulted by the
# 'test-all' script to determine whether the tests should be
# attempted.
#
check_build_status() {
  if [[ -e BUILD-FAIL && ! -e EXPECT-BUILD-FAIL ]]; then
    touch CI-FAIL
  elif [[ -e BUILD-OK && -e EXPECT-BUILD-FAIL ]]; then
    touch CI-FAIL
  fi
}

check_test_status() {
  if [[ -e TEST-FAIL && ! -e EXPECT-TEST-FAIL ]]; then
    touch CI-FAIL
  elif [[ -e TEST-OK && -e EXPECT-TEST-FAIL ]]; then
    touch CI-FAIL
  fi
}

status=0

summary_file=$(pwd)/summary.txt
rm -f "$summary_file"
summary () {
  echo $* >> "$summary_file"
}

error_count=0
fail () {
  error_count=$(( error_count + 1 ))
}

#
# Run build + test for each grammar.
#
for gramdir in $(pwd)/grammars/*; do
  grammar=$(basename "$gramdir")

  cd "$gramdir"
  build_success=yes
  {
    echo "===== Build $grammar"
    if npx tree-sitter generate 2>&1; then
      if [[ -e EXPECT-BUILD-FAIL ]]; then
        fail
        summary "$grammar build: UNEXPECTED SUCCESS"
      else
        summary "$grammar build: expected success"
      fi
    else
      build_success=no
      if [[ -e EXPECT-BUILD-FAIL ]]; then
        summary "$grammar build: expected fail"
      else
        fail
        summary "$grammar build: UNEXPECTED FAIL"
      fi
    fi
    # This file is created by 'tree-sitter generate' (tree-sitter 0.19)
    # and we don't want it. Instead, we use the package.json in a parent
    # directory which provides tree-sitter-cli for all the grammars.
    rm -f package.json

    if [[ "$build_success" = no || -e EXPECT-BUILD-FAIL ]]; then
      echo "===== [Skip testing $grammar]"
      summary "$grammar test: skipped"
    else
      echo "===== Test $grammar"
      if npx tree-sitter test 2>&1; then
        summary "$grammar test: success"
      else
        fail
        summary "$grammar test: FAIL"
      fi
    fi
  } | tee output.log
done

#
# Summarize results
#
echo "===== Results"
cat "$summary_file"

if [[ "$error_count" -gt 0 ]]; then
  {
    echo
    echo "$error_count unexpected result(s)."
  }
  exit 1
fi
